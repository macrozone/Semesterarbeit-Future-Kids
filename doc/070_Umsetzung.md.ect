
\pagebreak


# Umsetzung Prototyp

## Verwendete Werkzeuge

### Source-Code-Kontrolle

Als Werkzeug für die Source-Code-Kontrolle kam *Git* zur Verwendung, da das Projekt bereits 
auf *Github* gehostet wird. 

Ein neuer *Branch* *feature/schedules* protokollierte die Arbeit auf Github, dieser wurde ausgehend vom aktuellsten Entwicklungsstand erstellt. Der Fortschritt der Arbeit wurde regelmässig auf Github geladen und somit gesichert.


### IDE

Als Entwicklungsumgebung kam RubyMine 7.1.2 zur Verwendung, welche es erlaubt *Ruby on Rails*-Applikationen
direkt auszuführen und zu debuggen. RubyMine vereinfacht auch das Ausführen von *Specs* oder *Tests*.

Zusätzlich wurde *Sublime Text 3* verwendet, da dieser aktuell für das verwendete *cjsx*-Format eine bessere
Syntax-Unterstüztung bietet.


### React

React ist in *FutureKid* über das *gem*[^fn_gems] *'react-rails'* bereits integriert, welches die die *react*-Laufzeitumgebung enthält, jsx-Dateien kompiliert und in die Asset-Pipeline[^fn_assetpipeline] von Ruby on Rails integriert, sowie eine Integration der Komponenten in die Rails-View-Schicht [^fn_react_rails]. Ferner können damit React-Komponenten serverseitig gerendert werden. [^fn_ssr]. Ergänzt wurde das *gem 'sprockets-coffee-react'*, welches den CJSX-Syntax unterstützt. Zu JSX und CJSX siehe nachfolgender Abschnitt.


[^fn_gems]: Gems ("Edelsteine") sind Pakete oder Module für Ruby, welche jeweils eine bestimmte Aufgabe erfüllen. Ein gem kann andere gems als Abhängigkeiten benötigen.

[^fn_ssr]: Serverseitiges Rendering (SSR) soll es unter anderem Suchmaschinen leichter machen, Web-Anwendung zu indizieren und zu durchsuchen, zudem kann die initiale Ladezeit von Webseiten reduziert werden. Für *FutureKids* ist dies nicht von Bedeutung.


[^fn_assetpipeline]: Zusatzdatein zu HTML-Seiten, wie Scripts und Stylesheets können in Ruby on Rails vorkompliliert und optimiert werden. Diesen Ablauf erledigt die *Asset Pipeline*

[^fn_react_rails]: Siehe Quelle [@react_rails]

### JSX und CJSX

*JSX* Erweitert Javascript um eine XML-artige Syntax, in welcher React-Komponenten ähnlich wie HTML erstellt werden können:

~~~~~~~{caption="Beispielcode in JSX" label=lstSampleJSX}
var dropdown =
  <Dropdown>
    A dropdown list
    <Menu>
      <MenuItem>Do Something</MenuItem>
      <MenuItem>Do Something Fun!</MenuItem>
      <MenuItem>Do Something Else</MenuItem>
    </Menu>
  </Dropdown>;

render(dropdown);

~~~~~~~
[^fn_jsx_sample]

[^fn_jsx_sample]: Beispiel angelehnt an: https://facebook.github.io/jsx/

CJSX ist eine Variante von *JSX*, welcher *CoffeeScript*, statt Javascript zugrunde liegt.

*CoffeeScript* ist ein *Dialekt* von JavaScript, wobei Klammern häufig weggelassen und statdessen Blöcke mittels Einrücken codiert werden. Weiterhin bietet *CoffeeScript* eine Reihe an *Syntactic Sugar*, d.h. Syntaktische Erweiterungen, welche häufig benötigte Konstrukte vereinfachen. [^fn_coffeescript]

[^fn_coffeescript]: Nähers zu CoffeeScript auf http://coffeescript.org/

*CJXS* vereint nun CoffeeScript mit der XML-Erweiterungen von JSX:

~~~~~~~{caption="Beispielcode in CJSX" label=lstSampleCJSX}
var dropdown =
  <Dropdown>
    { <h1>A dropdown list.</h1> if @state.showTitle }
    <Menu>
    {
    	for menu in menuItems
    		<MenuItem
    			id=menu.id
    			isActive=@state.activeMenu is menu.id
    		>{menu.label}</MenuItem>
	  }  
    </Menu>
  </Dropdown>;

render(dropdown);

~~~~~~~

Da in *FutureKids* weitgehend *CoffeeScript* verwendet wird, ist deren Verwendung auch für React-Komponenten naheliegend. Als Alternative gibt es die vereinfachte JSX-CoffeeScript-Syntax, wobei die JSX-Subsyntax mittels `-Zeichen "escaped" wird. Allerdings entsteht dadurch eine Mischsyntax aus Javascript und CoffeeScript. Der Author dieser Arbeit vertritt die Meinung dass die CJSX-Syntax expressiver ist, als die Mischform und reines JSX, da Schleifen und Kontrollstrukturen sehr einfach in den XML-Strukturen verwendet werden können (Siehe obiges Beispiel).

\pagebreak

## Erste Iteration

In einer ersten Iteration wurden die Anforderungen \ref{sc-001} - \ref{sc-015} gemäss Planung umgesetzt, dabei wurden \ref{sc-008} und \ref{sc-009} nur graphisch gelöst (wie im Abschnitt \ref{feinkonzept} beschrieben). 

### Implementierung

#### Architektur

Auf der Profilseite eines Schülers wurde eine neue Seite erstellt, die Mentorensuche (Abbildung \ref{screenshot_new_menu}). Diese besteht aus einem versteckten Formular, welches die zu definierenden Werte wie Hauptmentor, Ersatzmentor, Wochentag des Treffens und Zeitpunkt des Treffens enthält. Weiterhin enhtält sie die konzipierte *React*-Komponente, welche die es ermöglicht, Mentoren per Filterkriterien zu finden und mit den Zeitfenstern des Schülers zu vergleichen (Abbildung \ref{screenshot_iteration1}).

![Ein neuer Menupunkt öffnet die neue Mentorensuche \label{screenshot_new_menu}](img/screenshot_new_menu.png)

![Die neue Mentorensuche weist jedem Mentor eine Farbe zu (dynamisch abhängig von der Anzahl mentoren). Sie wurde als *React*-Komponente implementiert\label{screenshot_iteration1}](img/screenshot_iteration1.png)

Wählt ein Benutzer einen Mentor, erhält er einen Bestätigungs-Dialog (Abbildung \ref{screenshot_iteration1_assign}). Wird dieser bestätigt, werden die gewählten Werte ins Formular übertragen und das Formular abgeschickt (als POST-, eigentlich PUT-Request). Zwar wäre auch ein AJAX-Aufruf möglich gewesen, d.h. ein asynchroner Aufruf an den Webserver, welcher die Seite nicht neu lädt. Allerdings macht es Sinn, nach gesetztem Wert die Profilseite des Schülers anzuzeigen. Ein Formular entspricht genau diesem Ablauf.


![Bei einem Klick auf einen Zeitfenster kann der Mentor dem Schüler direkt zugewiesen werden. Es sind nur diejenigen Zeitfenster klickbar, welche sowohl von Schüler als auch von Mentor belegt sind\label{screenshot_iteration1_assign}](img/screenshot_iteration1_assign.png)


Diagramm \ref{architecture_structure} fasst diesen Aufbau zusammen. Die Komponente *KidMentorSchedules* entspricht dabei dem konzipierten Aufbau im Komponenten-Diagram \ref{uml_components_mentor_search}, jedoch wurde die *Mentoren-Filter*-Komponente direkt der Haupt-Komponente (*Mentoren-Suche*) unterstellt, da dies die Kommunikation zwischen den Komponenten vereinfacht. Die Haupt-Komponente trägt dabei sowohl den *State* aller gewählter Filter, sowie den *State* der Mentoren-Auswahl für die Darstellung. 

![Struktur des Bildschirms für die Mentorensuche, ausgehend vom aufgerufenenen *KidsController*, dargestellt als "Querschnitt" durch die Anwendung in Paket-Struktur. Die einzelnen Pakete zeigen dabei eine Schicht oder Komponente der Anwendung\label{architecture_structure}](img/architecture_structure.png)

\pagebreak

#### Anpassungen am Controller

Der *KidsController*, welcher der Komponenten zu Grunde liegt, wurde um eine Methode *show_kid_mentors_schedules* ergänzt (siehe Listing \ref{lst_controller_show_kid_mentors_schedules}), welcher alle benötigten Daten ausliefert. Da diese Daten in der gerenderte HTML-Seite mitgeliefert werden und somit zur Ladezeit der Seite beiträgt, wurden die *Model*-Daten des Kindes und der Mentoren stark reduziert, damit nur die nötigen Daten gesendet werden.

~~~~~~~{caption="Controller-Methode\\, welche die Daten für die Komponente ausliefert" label=lst_controller_show_kid_mentors_schedules}
def show_kid_mentors_schedules
 @kid_mentor_schedules_data = Jbuilder.new do |json|
    json.mentors do
      Mentor.active.each do |mentor|
        json.set! mentor.id do
          json.id mentor.id
          json.prename mentor.prename
          json.name mentor.name
          json.sex mentor.sex
          json.ects mentor.ects
          json.kids mentor.kids, :id
          json.secondary_kids mentor.secondary_kids, :id
          json.primary_kids_school do
            if not mentor.primary_kids_school.nil?
              json.id mentor.primary_kids_school.id
            end
          end
          json.schedules create_schedules_nested_set mentor.schedules
        end
      end
    end
    json.kid do
      json.id @kid.id
      json.prename @kid.prename
      json.name @kid.name
      json.mentor_id @kid.mentor_id
      json.secondary_mentor_id @kid.secondary_mentor_id
      json.schedules create_schedules_nested_set @kid.schedules
    end
    json.schools School.all, :id, :display_name
  end.attributes!
end
~~~~~~~


#### Filter

Die Hauptkomponente hält den *State* aller Filter. Sie erhält diesen Status über *Events* von den untergeordneten Filter-Komponenten. Listing \ref{lst_filter_sex} 
zeigt ein Beispiel, wie die Komponente alle nicht passenden Filter entfernt, sofern der Filter gesetzt ist.

~~~~~~~{caption="Beispiel für das herausfiltern mit nicht-passendem Geschlecht" label=lst_filter_sex}
getFilteredMentors: ->
  mentors = @props.mentors
  filteredMentors = _.clone @props.mentors
  index = 0
  total = _.size @props.mentors
  for id, mentor of filteredMentors
    mentor.colors = @getColorsOfMentor total, index
    index++
    if @state.filters?.sex?
      delete filteredMentors[id] if mentor.sex isnt @state.filters?.sex
    (...)
  return filteredMentors
~~~~~~~




#### Färben der Mentoren

Jeder Mentor soll eine Farbe erhalten, damit leichter erkennbar ist, welche Spalte zu welchem Mentor gehört. 
Im HSL-Farbraum kann sehr leicht über den *Hue*-Wert, der Winkel im Farbkreis, rotiert werden, bei gleichbleibender Helligkeit (*lightness*) und Sättigung (*saturation*). Möchte man beispielsweise jeder Index-Zahl von 0 bis 4 eine Farbe zuweisen, kann man den Farbkreis in 5 Segmente unterteilen: 0°, 72°, 144°, 216°, 288° und jeder Zahl eine dieser Farben zuweisen:

- 0 --> 0°
- 1 --> 72
- 2 --> 144°
- 3 --> 216°
- 4 --> 288°

Allgemeine Formel:

$H = index \cdot \frac{360\degree}{totalNumber}$

Erhöht man die Anzahl der Segmente, so sind benachbarte Farben jedoch sehr ähnlich und damit auch benachbarte Index-Zahlen. 
Dies kann man umgehen, indem man jeweils eine Farbe "überspringt":

- 0 --> 0°
- 1 --> 144°
- 2 --> 288°
- 3 --> 72°
- 4 --> 216°

Listing \ref{lst_getColorsOfMentor} zeigt die Umsetzung dieser Farbzuweisung. Die Fallunterscheidung von gerader und ungerader Totalanzahl ist nötig, da man beim Multiplizieren mit 2 in einem Restklassenring mit gerader Zahl nur die Hälfte der Elemente erreicht.

~~~~~~~{caption="Diese Funktion weist jedem Mentor eine Farbe zu" label=lst_getColorsOfMentor}
getColorsOfMentor: (total, index) ->
  indexShifted = (index) -> 
    totalEven = total % 2 is 0
    offset = if totalEven and index/total >= 0.5 then 1 else 0
    (index*2+offset) % total

  angle = 360 / total
  hue = angle * indexShifted index
  background: "hsla(#{hue}, 70%, 90%, 0.5)"
  text: "hsl(#{hue}, 90%, 20%)"
~~~~~~~

\pagebreak

### Verifizierung

Die einzelnen Anforderungen wurden durch Akzeptanztests mittels *Capybara-Specs* getrieben erstellt. Abbildung \ref{img_testresults1} zeigt das Testprotokoll (aus *RubyMine*) der Akzeptanztests.  

![Ausgabe der Testsuite von *RubyMine* nach der ersten Iteration \label{img_testresults1}](img/testresults1.png)

Die Anforderungen, welche die Anwendung vor der Anpassung bereits erfüllten, wurden allerdings nicht erneut maschinell überprüft.

- \ref{sc-001} \checkmark durch die bisherige Lösung erfüllt
- \ref{sc-002} \checkmark durch die bisherige Lösung erfüllt
- \ref{sc-003} \checkmark durch die bisherige Lösung erfüllt
- \ref{sc-004} \checkmark durch die bisherige Lösung erfüllt
- \ref{sc-005} \checkmark durch die bisherige Lösung und zudem durch die neue Mentoren-Suche erfüllt, welche im Test **timetable - select one entry to store the date** getested wurde.
- \ref{sc-006} teilweise durch bisherige Lösung erfüllt, aus der Mentorensuche aus können aber nicht direkt Ersatzmentoren zugewiesen werden.
- \ref{sc-007} \checkmark durch die bisherige Profilseite des Schülers erfüllt
- \ref{sc-008} \checkmark grafisch über die neue Mentoren-Suche umgesetzt
- \ref{sc-009} \checkmark grafisch über die neue Mentoren-Suche umgesetzt
- \ref{sc-010} \checkmark als Filter umgesetzt, im Test **filters - sex-filter** getestet
- \ref{sc-011} \checkmark als Filter umgesetzt, im Test **filters - ects-filter** getestet
- \ref{sc-012} \checkmark als Filter umgesetzt, im Test **filters - school-filter** getestet
- \ref{sc-013} \checkmark als Filter umgesetzt, im Test **filter - number-of-kids-filter** getested
- \ref{sc-014} \checkmark in dieser Iteration noch nicht maschinell getestet
- \ref{sc-015} \checkmark im Test **timetable - select one entry to store the date** verifiziert

Die Anwendung wurde daraufhin auf die Test-Instanz (*Staging-Server*) geladen und durch den Kunden verifiziert. 

### Verifizierung der NFR

Die Nicht-Funktionalen Anforderungen wurden manuell verifiziert:

- \ref{nfr-01} \checkmark Erfüllt durch die Trennung von Mentorensuche und Schülerstundenplan
- \ref{nfr-02} \checkmark Es sind keine doppelten oder inaktive Schaltflächen mehr vorhanden in den bearbeiteten Komponenten
- \ref{nfr-03} teilweise erfüllt, bei vielen Mentoren sind allerdings die Spalten zu klein
- \ref{nfr-04} \checkmark ein gefundener Mentor kann mit zwei Klicks zugewiesen werden (einer für die Bestätigung)
- \ref{nfr-05} teilweise erfüllt durch die Filter, jedoch fehlt der Name des aktuellen Kindes und bereits zugewiesener Mentoren

### Definition of Done:

- **Funktionalität wurde implementiert** \checkmark 
- **Funktionalität wurde getested** Teilweise, es fehlen noch wenige Tests (Anzahl-Schüler-Filter)
- **Funktionalität wurde auf eine Testumgebung geladen und die Integration überprüft** \checkmark
- **Funktionalität und Projekt kann unter einer Open Source Lizenz veröffentlicht werden und Umsetzung beachtet Lizenzen verwendeter Dritt-Software** \checkmark Die Verwendeten Libraries (React, React-Select, gems) wurden überprüft
- **Funktionalität wurde auf unterstützten Browsern überprüft (Firefox aktuell, Chrome aktuell, IE ab 10)** \checkmark 
- **Gestaltung der Funktionalität entspricht der Corporate-ID von AOZ** \checkmark, auf Staging erscheint allerdings ein anderes Logo
- **Funktionalität und Deployment ist dokumentiert** \checkmark, Deployment benötigt keine Änderung


\pagebreak


## Zweite Iteration

Die erste Rückmeldung fiel sehr positiv aus. In einem weiteren Treffen wurden Anpassungen besprochen. Grösstes Problem war der Filter für die Anzahl der betreuten Kinden, gemäss \ref{sc-013}. In der Praxis ist es wichtiger zu unterscheiden, ob ein Mentor als Haupt- oder primärer Mentor ein Kind betreut oder nur Ersatzmentor ist. Zudem soll beim Zuweisen eines Mentors zu einem Kind dieser als primärer oder als Ersatzmentor zugewiesen werden, je nach dem, ob der Schüler schon ein Mentor hat oder nicht.

Zudem wurden gewisse Beschriftungen bemängelt, die angepasst wurden.

Weiterhin wurde die Anzahl an Mentoren für den Vergleich limitiert auf 10 mentoren, sodass die Balken nicht zu klein werden.

### Neue Anforderungen

Die Folgenden Stories wurden angepast:

<% include 'story.macro.ect',
  number: "013"
  version: "2"
  title: "Als Administrator möchte ich für einen Schüler nach Mentoren suchen können, welche als primärer Mentor oder Ersatzmentor im Einsatz sind"
  priority: "MAY"
  accCriteria: [
    "Es können Mentoren gefunden werden, welche noch kein Kind zugewiesen haben"
    "Es können Mentoren gefunden werden, welche nur als primäre Mentoren aktiv sind"
    "Es können Mentoren gefunden werden, welche nur als Ersatzmentoren aktiv sind"
    "Es können Mentoren gefunden werden, sowohl als primärer Mentor als auch als Ersatzmentor aktiv sind"
  ]
%>

<% include 'story.macro.ect',
  number: "010"
  version: "2"
  title: "Als Administrator möchte ich für einen Schüler nach Mentoren mit passendem Geschlecht suchen können."
  priority: "MAY"
  accCriteria: [
    "Neu: Die Optionen sind mit 'männlich' und 'weiblich' beschriftet"
  ]
%>

<% include 'story.macro.ect',
  number: "011"
  version: 2
  title: "Als Administrator möchte ich für einen Schüler nach Mentoren suchen können, welche mittels ECTS-Punkten vergütet werden."
  priority: "MAY"
  accCriteria: [
    "Neu: Die Optionen sind mit 'ECTS' und 'Kein ECTS' beschriftet"
  ]
%>

<% include 'story.macro.ect',
  number: "008"
  version: 2
  title: "Als Administrator möchte ich für einen Schüler nach Mentoren mit überschneidenden Zeitfenstern suchen können"
  priority: "MAY"
  accCriteria: [
    "Neu: Es werden maximal 10 Mentoren für den Vergleich angezeigt"
  ]
%>


Diese Story wurde als Massnahme für die Reduktion der nötigen Klicks implizit umgesetzt, aber noch nicht als Story erfasst. Da diese Anforderung nun etwas angepasst wurde, soll sie hier eine eigene Story erhalten:

<% include 'story.macro.ect',
  number: "016"
  title: "Als Administrator möchte ich in der Mentoren-Suche ein Mentor direkt einem Kind zuweisen können"
  priority: "MAY"
  accCriteria: [
    "Die Wahl muss bestätigt werden"
    "Der Mentor wird als Hauptmentor zugewiesen, wenn das Schüler noch keinen Mentor hat"
    "Der Mentor wird als Ersatzmentor zugeweisen, wenn der Schüler bereits einen Mentor hat"
    "Es erscheint eine Meldung, wenn sowohl primärer Mentor, als auch Ersatzmentor zugewiesen sind"
    "Angewählter Wochentag wird persistiert"
    "Angewählter Zeitpunkt wird persistiert"
  ]
%>


### Umsetzung und Verifizierung

![Die Auswahl für den Mentoren zur Anzahl der betreuten Kinder, wurde angepasst. Zudem wurde das zuvor nicht sichtbare Formular, welches der Seite zu Grunde liegt, sichtbar gemacht, da es nützliche Informationen offenbart. Zudem kann dadurch der Mentor manuell geändert werden. \label{screenshot_iteration2}](img/screenshot_iteration2.png)

![Sind schon beide Mentoren zugewiesen, erscheint nun eine Fehlermeldung\label{screenshot_iteration2_assign}](img/screenshot_iteration2_assign.png)


Anwendung und Tests wurden angepasst und erweitert, das resultierende Testprotokol aus *RubyMine* ist in Abbildung \ref{img_testresults2} ersichtlich.

- \ref{sc-013v2} \checkmark im Test **filter - mentors-display-filter** verifiziert
- \ref{sc-010v2}, \ref{sc-011v2} Die Anpassung der Beschriftungen wurden nicht maschinell überprüft
- \ref{sc-008v2} \checkmark in den angepassten Tests **timetable - shows maximum 10 mentors** verifiziert
- \ref{sc-016} \checkmark in den angepassten Tests **timetable - selection of mentors** verifiziert



![Ausgabe der Testsuite von *RubyMine* nach der zweiten Iteration \label{img_testresults2}](img/testresults2.png)

### Verifizierung der NFR (Ergänzungen)

- \ref{nfr-03} \checkmark nun ebenfalls erfüllt durch das Limit von 10 maximal angezeigter Mentoren
- \ref{nfr-05} \checkmark erfüllt durch das Formular das jetzt angezeigt, sowie durch die Anzeige des Namens des Kindes.

### Definition of Done 

- **Funktionalität wurde implementiert** \checkmark 
- **Funktionalität wurde getested** \checkmark die neuen Funktionalitäten wurden getestet, es wurden fehlende Tests nachgereicht.
- **Funktionalität wurde auf eine Testumgebung geladen und die Integration überprüft** \checkmark
- **Funktionalität und Projekt kann unter einer Open Source Lizenz veröffentlicht werden und Umsetzung beachtet Lizenzen verwendeter Dritt-Software** \checkmark 
- **Funktionalität wurde auf unterstützten Browsern überprüft (Firefox aktuell, Chrome aktuell, IE ab 10)** \checkmark 
- **Gestaltung der Funktionalität entspricht der Corporate-ID von AOZ** \checkmark
- **Funktionalität und Deployment ist dokumentiert** \checkmark










